using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Application.ServiceFactory;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;
using Network_Vulnerability_Scaner.Domain.Services.GetNmapScanString;

namespace Network_Vulnerability_Scaner.Domain.Services
{
    public class ScanMethodsService: IScanMethodsService
    {
        private readonly IDomainServiceFactory _domainServiceFactory;


        public ScanMethodsService(IDomainServiceFactory serviceFactory)
        {
            _domainServiceFactory = serviceFactory ?? throw new NullReferenceException(nameof(DomainServiceFactory));
        }
        
        public async Task<ScanReport> GetActiveHostsAsync(NetworkConfiguration networkConfiguration)
        {
            
            var scanString = await _domainServiceFactory.CreateGetNmapScanStringService()
                .GetNmapScanStringForActiveHostsScanningAsync(networkConfiguration.Ip);

            
            var scanReport=new ScanReport
            {
                NmapFullReport = await _domainServiceFactory
                    .CreateNmapScanningService()
                    .StartScanAsync(scanString),
                
                StartTime=DateTime.Now
            };

           
            scanReport.ActiveHosts = (List<Host>)
                await _domainServiceFactory
                    .CreateReportReaderService()
                    .GetActiveHostsFromReportAsync(scanReport.NmapFullReport);

            
            return scanReport;
        }
    }
}
