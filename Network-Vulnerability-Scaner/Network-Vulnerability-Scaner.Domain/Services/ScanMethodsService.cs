using System.Collections.Concurrent;
using Microsoft.Extensions.Configuration;
using Network_Vulnerability_Scaner.Application.ServiceFactory;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces;

namespace Network_Vulnerability_Scaner.Domain.Services
{
    public class ScanMethodsService : IScanMethodsService
    {
        private readonly IDomainServiceFactory _domainServiceFactory;


        public ScanMethodsService(IDomainServiceFactory serviceFactory, IConfiguration configuration)
        {
            _domainServiceFactory = serviceFactory ?? throw new NullReferenceException(nameof(DomainServiceFactory));
        }

        public async Task<ScanReport> GetActiveHostsAsync(NetworkConfiguration networkConfiguration)
        {

            var scanString = await _domainServiceFactory.CreateGetNmapScanStringService()
                .GetNmapScanStringForActiveHostsScanningAsync(networkConfiguration.Ip);

            if (String.IsNullOrEmpty(scanString))
            {
                throw new InvalidOperationException("Can't create nmap scan string");
            }

            var scanReport = new ScanReport
            {
                ActiveHostsNmapReport = await _domainServiceFactory
                    .CreateNmapScanningService()
                    .StartScanAsync(scanString),

                StartTime = DateTime.Now
            };


            scanReport.ActiveHosts = (List<Host>)
                await _domainServiceFactory
                    .CreateReportReaderService()
                    .GetActiveHostsFromReportAsync(scanReport.ActiveHostsNmapReport);

            return scanReport;
        }

        public async Task<IEnumerable<Host>> GetOpenPortsAsync(IEnumerable<Host> activeHosts
            , NetworkConfiguration networkConfiguration)
        {

            var scanString = await _domainServiceFactory.CreateGetNmapScanStringService()
                .GetNmapScanStringForHostPortsScanningAsync(networkConfiguration);

            if (String.IsNullOrEmpty(scanString))
            {
                throw new InvalidOperationException("Can't create nmap scan string");
            }

            var concBag = new ConcurrentBag<Host>();
            
            await Parallel.ForEachAsync(activeHosts, async (activeHost, token) =>
            {

                var fullScanString = scanString + " " + activeHost.Ip;


                try
                {
                    activeHost.AcivePortsNmapReport = await _domainServiceFactory
                        .CreateNmapScanningService()
                        .StartScanAsync(fullScanString);
                    
                    activeHost.PortScanStartTime= DateTime.Now;

                }
                catch (Exception e)
                {
                    //Log.Warning("Unsuccessful attempt to scan host: {0}, {1}",
                    //    activeIp.ArticleSourceUrl, e.Message);
                }

                activeHost.OS = await _domainServiceFactory
                        .CreateReportReaderService()
                        .GetHostOsFromReportAsync(activeHost.AcivePortsNmapReport);

                activeHost.OpenPorts = (List<Port>?)await _domainServiceFactory
                    .CreateReportReaderService()
                    .GetOpenPortsFromReportAsync(activeHost.AcivePortsNmapReport);

                concBag.Add(activeHost);
            });

            return concBag.ToList();
        }
    }
}
