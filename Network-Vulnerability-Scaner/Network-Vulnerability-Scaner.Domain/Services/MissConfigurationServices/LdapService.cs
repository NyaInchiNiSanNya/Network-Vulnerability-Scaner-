using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;
using System;
using System.Collections.Generic;
using System.DirectoryServices;
using Port = Network_Vulnerability_Scaner.Domain.Entities.Port;

namespace Network_Vulnerability_Scaner.Domain.Services.MissConfigurationServices
{
    internal class LdapService : ILdapService
    {
        public async Task<string> DirectoryCheckAsync(Port port, string ipAddress)
        {
            try
            {
                string report = "";

                string ldapPath = $"LDAP://{ipAddress}:{port.PortNumber}";

                using (DirectoryEntry entry = new DirectoryEntry(ldapPath))
                {
                    object nativeObject = entry.NativeObject;

                    // Если удалось получить объект, значит доступ разрешен
                    if (nativeObject != null)
                    {
                        // Используем DirectorySearcher для выполнения запроса к LDAP-серверу
                        using (DirectorySearcher searcher = new DirectorySearcher(entry))
                        {
                            searcher.Filter = "(objectClass=*)"; // Фильтр для получения всех объектов

                            // Устанавливаем размер максимального количества результатов
                            searcher.SizeLimit = 10; // Максимальное количество результатов

                            // Выполняем поиск и получаем результаты
                            SearchResult result = searcher.FindOne();

                            if (result != null)
                            {
                                report = report + "LDAP access is allowed." + "\n";
                                // Получаем значение namingContexts
                                if (result.Properties.Contains("namingContexts"))
                                {
                                    report = report+ "Available naming contexts:" + "\n";
                                    
                                    foreach (string namingContext in result.Properties["namingContexts"])
                                    {
                                        report = report + namingContext + "\n";
                                    }
                                }
                                else
                                {
                                    report = report + "namingContexts not found." + "\n";
                                }

                                return report;
                            }
                        }

                        return "LDAP access denied or no response.";
                    }
                }

                return "LDAP access denied or no response.";
            }
            catch (Exception ex)
            {
                return $"Error occurred: {ex.Message}";
            }
        }
    }
}
