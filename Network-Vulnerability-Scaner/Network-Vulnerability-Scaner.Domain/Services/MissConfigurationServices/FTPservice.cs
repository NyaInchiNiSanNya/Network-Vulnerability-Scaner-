using Docker.DotNet.Models;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Port = Network_Vulnerability_Scaner.Domain.Entities.Port;

namespace Network_Vulnerability_Scaner.Domain.Services.MissConfigurationServices
{
    internal class FTPservice : IFtpService
    {

        class User
        {
            public string Name { get; set; }
            public string Password { get; set; }
        }


        public async Task<string> AnonymousCheckAsync(Port port, string ipAddress)
        {
            string ftpServerUrl = $"ftp://{ipAddress}:{port.PortNumber}";

            List<User> anonymousUsers=new List<User>()
            {
                new User() { Name = "anonymous", Password="anonymous@example.com"},
                new User() { Name = "anonymous", Password="your_email@example.com"},
                new User() { Name = "ftp", Password="anonymous@example.com"},
                new User() { Name = "guest", Password="anonymous@example.com"},
                new User() { Name = "ftp", Password="your_email@example.com"},
                new User() { Name = "guest", Password="your_email@example.com"}
            };
            
            string report = "";
            
            foreach (User user in anonymousUsers)
            {
                try
                {
                    FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftpServerUrl);
                    request.Method = WebRequestMethods.Ftp.ListDirectory;
                    
                    request.Credentials = new NetworkCredential(user.Name, user.Password);

                    report = report + "Name:" + user.Name + " " + "Password:" + user.Password + "\n";

                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();

                    report = report + response.StatusDescription + "\n";

                    report = report + "Содержимое каталога:" + "\n";

                    using (var streamReader = new StreamReader(response.GetResponseStream()))
                    {
                        report = report + streamReader.ReadToEnd() + "\n";
                    }
                    response.Close();

                }
                catch (WebException ex)
                {
                    report= report + ex.Message + "\n";
                }
            }

            return report;
        }
    }
}
