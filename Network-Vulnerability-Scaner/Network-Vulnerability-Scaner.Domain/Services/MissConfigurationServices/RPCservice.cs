using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;
using SharpCifs.Smb;
using System.Net.Sockets;
using System.Text;
using Port = Network_Vulnerability_Scaner.Domain.Entities.Port;

namespace Network_Vulnerability_Scaner.Domain.Services.MissConfigurationServices
{

    internal class RPCservice : IRpcService
    {

        public async Task<String> AnonymousCheckAsync(Port port, String ipAddress)
        {
            try
            {
                string response = "";

                //using (TcpClient client = new TcpClient())
                //{
                //    await client.ConnectAsync(ipAddress, port.PortNumber);

                //    if (client.Connected)
                //    {
                       
                //        NetworkStream stream = client.GetStream();
                //        byte[] buffer = Encoding.ASCII.GetBytes("");
                //        await stream.WriteAsync(buffer, 0, buffer.Length);

                        
                //        buffer = new byte[client.ReceiveBufferSize];
                //        int bytesRead = await stream.ReadAsync(buffer, 0, client.ReceiveBufferSize);
                //        response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                //        if (!string.IsNullOrEmpty(response) && response.Contains("Access allowed"))
                //        {
                //            return "RPC service allows anonymous access." + "\n";
                //        }
                //        else
                //        {
                //            return "RPC service does not allow anonymous access." + "\n";
                //        }
                //    }
                //}

                return "Unable to connect to RPC service." + "\n";
            }
            catch (Exception ex)
            {
                return $"Error occurred: {ex.Message}" + "\n";
            }
        }

    }
}
