using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Domain.Constants;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;

namespace Network_Vulnerability_Scaner.Domain.Services.GetNmapScanString
{
    internal class GetNmapScanStringService : ScanStringBuilder, IGetNmapScanStringService
    {
        async Task<String> IGetNmapScanStringService.GetNmapScanStringForActiveHostsScanningAsync(String ip)
        {
            StringBuilder ScanString = new StringBuilder(ip);

            ScanString = await ScanHostsWithoutPortsAsync(ScanString);

            return ScanString.ToString();
        }

        async Task<String> IGetNmapScanStringService.GetNmapScanStringForHostPortsScanningAsync
            (NetworkConfiguration networkConfiguration)
        {
            StringBuilder ScanString = new StringBuilder();

            if (networkConfiguration.Tcp)
            {
                switch (networkConfiguration.TcpScanMethod)
                {
                    case ScanMethods.SYN:
                        ScanString = await AddSynMethodScanAsync(ScanString);
                        break;

                    case ScanMethods.FIN:
                        ScanString = await AddFinMethodScanAsync(ScanString);
                        break;

                    case ScanMethods.XMAS:
                        ScanString = await AddXmasMethodScanAsync(ScanString);
                        break;
                }
            }

            if (networkConfiguration.Udp)
            {
                ScanString = await AddUdpMethodScanAsync(ScanString);
            }

            ScanString = await AddPortVersionScanAsync(ScanString);

            if (networkConfiguration.Ports != null && networkConfiguration.Ports.Count > 0)
            {
                ScanString = await AddSpecificPortScanAsync(ScanString);

                if (networkConfiguration.Tcp)
                {
                    ScanString = await AddSpecificTcpPortsAsync(ScanString, networkConfiguration.Ports);
                }

                if (networkConfiguration.Udp)
                {
                    ScanString = await AddSpecificUdpPortsAsync(ScanString, networkConfiguration.Ports);
                }
            }

            return ScanString.ToString();
        }

    }
}
