using Network_Vulnerability_Scaner.Domain.Interfaces;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Services.Reaquests;

namespace Network_Vulnerability_Scaner.Domain.Services
{
    public class VulnSearchDomainService : IVulnSearchDomainService
    {
        public async Task<List<NvdVulnerability>> GetVulnsFromNvdDbAsync(dataForVulnSearch data)
        {
            var splitVersion = data.Version.Split();

            var totalResult= new List<NvdVulnerability>();
            
            var requestResult=new List<NvdVulnerability>();

            var requestString = String.Empty;

            foreach (var versionPart in splitVersion)
            { 
                requestString = requestString + " " + versionPart;

                requestResult= await new NvdRequest().RequestToNvd(requestString);
                
                if (requestResult.Count==0)
                {
                    break;
                }
                
                totalResult=requestResult;
            }

            return totalResult;
        }

        public async Task<List<ExploitDbVulnerability>> GetVulnsFromExploitDbAsync(dataForVulnSearch data)
        {
            var splitVersion = data.Version.Split();

            var totalResult = new List<ExploitDbVulnerability>();

            var requestResult = new List<ExploitDbVulnerability>();

            var requestString = data.Version;

            for (Int32 i = splitVersion.Length - 1; i != -1; i--)
            {
                requestResult = await new ExploitDbRequest().RequestToExploitDb(requestString);

                totalResult = requestResult;

                if (requestResult.Count != 0)
                {
                    break;
                }

                requestString = requestString.Replace(splitVersion[i], String.Empty);
            }

            return totalResult;
        }
    }
}
