using Network_Vulnerability_Scaner.Domain.Interfaces;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Services.Reaquests;

namespace Network_Vulnerability_Scaner.Domain.Services
{
    public class VulnSearchDomainService : IVulnSearchDomainService
    {
        public async Task<List<NvdVulnerability>> GetVulnsFromNvdDbAsync(dataForVulnSearch data)
        {
            var totalResult = new List<NvdVulnerability>();

            var requestResult = new List<NvdVulnerability>();

            var requestString = data.Version;

            try
            {
                while (!String.IsNullOrEmpty(requestString))
                {
                    requestResult = await new NvdRequest().RequestToNvd(requestString);

                    totalResult = requestResult;

                    if (requestResult.Count != 0)
                    {
                        break;
                    }

                    Thread.Sleep(7000);
                    requestString = requestString.Substring(0, requestString.Length - 1);

                }

            }
            catch (InvalidOperationException e)
            {
                return null;
            }

            return totalResult;
        }

        public async Task<List<ExploitDbVulnerability>?> GetVulnsFromExploitDbAsync(dataForVulnSearch data)
        {
            var totalResult = new List<ExploitDbVulnerability>();

            var requestResult = new List<ExploitDbVulnerability>();

            var requestString = data.Version;

            try
            {
                while (!String.IsNullOrEmpty(requestString))
                {
                    requestResult = await new ExploitDbRequest().RequestToExploitDb(requestString);

                    totalResult = requestResult;

                    if (requestResult.Count != 0)
                    {
                        break;
                    }

                    requestString = requestString.Substring(0, requestString.Length - 1);

                }

            }
            catch (InvalidOperationException e)
            {
                return null;
            }

            return totalResult;
        }

        public async Task<List<GithubVulnerability>?> GetVulnsFromGithubAsync(dataForVulnSearch data)
        {
            var totalResult = new List<GithubVulnerability>();

            var requestResult = new List<GithubVulnerability>();

            var requestString = data.Version;

            try
            {
                while (!String.IsNullOrEmpty(requestString))
                {
                    requestResult = await new GithubRequest().RequestToGithub(requestString);


                    if (requestResult != null && requestResult.Count!=0)
                    {
                        totalResult = requestResult;
                        break;
                    }

                    Thread.Sleep(6000);

                    requestString = requestString.Substring(0, requestString.Length - 1);

                }

            }
            catch (InvalidOperationException e)
            {
                return null;
            }

            return totalResult;
        }
    }
}
