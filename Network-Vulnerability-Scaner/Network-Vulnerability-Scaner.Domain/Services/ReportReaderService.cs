using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;

namespace Network_Vulnerability_Scaner.Domain.Services
{
    internal class ReportReaderService : IReportReaderService
    {
        private readonly String _hostReaderSplitPattern =
            @"Nmap scan report for";

        private readonly String _hostIpPattern =
            @"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b";

        private readonly String _hostMacPattern =
            @"(?<=MAC Address: )[0-9A-Fa-f:]+";

        async Task<IEnumerable<Host>> IReportReaderService.GetActiveHostsFromReportAsync(String nmapReport)
        {
            var hosts = new List<Host>();

            String[] blocks = nmapReport.Split(new[] { _hostReaderSplitPattern }, StringSplitOptions.RemoveEmptyEntries);

            foreach (string block in blocks)
            {
                String trimmedBlock = block.Trim();


                if (!String.IsNullOrWhiteSpace(trimmedBlock) && trimmedBlock.Contains("Host is up"))
                {
                    try
                    {
                        var host = new Host
                        {
                            Ip = await GetHostIpAsync(trimmedBlock),

                            MAC = await GetHostMacAsync(trimmedBlock)

                        };

                        hosts.Add(host);
                    }
                    catch (ArgumentException)
                    {
                        //Log
                    }
                }

            }
            return hosts;
        }

        private async Task<String> GetHostIpAsync(String value)
        {
            Match match = Regex.Match(value, _hostIpPattern);

            if (match.Success)
            {
                String ipAddress = match.Value;
                return ipAddress;
            }

            throw new ArgumentException("the string has nos matches");
        }

        private async Task<String?> GetHostMacAsync(String value)
        {
            Match match = Regex.Match(value, _hostMacPattern);

            if (match.Success)
            {
                String macAddress = match.Value;
                return macAddress;
            }

            return null;
        }
    }
}
