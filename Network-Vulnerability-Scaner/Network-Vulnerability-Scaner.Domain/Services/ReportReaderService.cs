using System.Text.RegularExpressions;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;

namespace Network_Vulnerability_Scaner.Domain.Services
{
    internal class ReportReaderService : IReportReaderService
    {
        private readonly String _hostReaderSplitPattern =
            @"Nmap scan report for";

        private readonly String _hostIpPattern =
            @"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b";

        private readonly String _hostMacPattern =
            @"(?<=MAC Address: )[0-9A-Fa-f:]+";

        private readonly String _portsPattern =
            @"(\d+)\/\w+\s+(\w+)\s+(\w+(?:\s+\w+)?)(?:\s+((?:\w+\s*)+))?";

        private readonly String _OS_Pattern =
            @"OS(?: details)?: ([^\n;]+)";

        async Task<IEnumerable<Host>> IReportReaderService.GetActiveHostsFromReportAsync(String nmapReport)
        {
            var hosts = new List<Host>();

            String[] blocks = nmapReport.Split(new[] { _hostReaderSplitPattern }
                , StringSplitOptions.RemoveEmptyEntries);

            foreach (string block in blocks)
            {
                String trimmedBlock = block.Trim();


                if (!String.IsNullOrWhiteSpace(trimmedBlock) && trimmedBlock.Contains("Host is up"))
                {
                    try
                    {
                        var host = new Host
                        {
                            Ip = await GetHostIpAsync(trimmedBlock),

                            MAC = await GetHostMacAsync(trimmedBlock)

                        };

                        hosts.Add(host);
                    }
                    catch (ArgumentException)
                    {
                        //Log
                    }
                }

            }
            return hosts;
        }

        public async Task<String> GetHostOsFromReportAsync(String nmapReport)
        {
            Match match = Regex.Match(nmapReport, _OS_Pattern);

            if (match.Success)
            {
                return match.Value;
            }

            return String.Empty;
        }

        public async Task<IEnumerable<Port>> GetOpenPortsFromReportAsync(String nmapReport)
        {
                var hosts = new List<Port>();

            String[] lines = nmapReport.Split("\r\n");

            foreach (String line in lines)
            {
                Match match = Regex.Match(line, _portsPattern);

                String[] parts = line.Split(new Char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                if (match.Success)
                {

                    var port = new Port
                    {
                        PortNumber = Convert.ToInt32(parts[0].Split('/')[0]),
                        Protocol = parts[0].Split('/')[1],
                        State = parts[1],
                        Service = parts[2]
                    };

                    if (parts.Length>3)
                    {
                        port.Version = string.Join(" ", parts.Skip(3))??String.Empty;
                    }

                    hosts.Add(port);
                }
            }

            return hosts;
        }

        private async Task<String> GetHostIpAsync(String value)
        {
            Match match = Regex.Match(value, _hostIpPattern);

            if (match.Success)
            {
                String ipAddress = match.Value;
                return ipAddress;
            }

            throw new ArgumentException("the string has nos matches");
        }

        private async Task<String> GetHostMacAsync(String value)
        {
            Match match = Regex.Match(value, _hostMacPattern);

            if (match.Success)
            {
                String macAddress = match.Value;
                return macAddress;
            }

            return String.Empty;
        }
    }
}
