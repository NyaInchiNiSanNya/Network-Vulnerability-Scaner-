using Network_Vulnerability_Scaner.Application.ServiceFactory;
using Network_Vulnerability_Scaner.Domain.Entities;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;


namespace Network_Vulnerability_Scaner.Domain.Services
{
    internal class PortConfigurationCheckService : IPortConfigurationCheckService
    {
        private readonly IDomainServiceFactory _domainServiceFactory;

        public PortConfigurationCheckService(IDomainServiceFactory serviceFactory) {

            _domainServiceFactory = serviceFactory ?? throw new NullReferenceException(nameof(DomainServiceFactory));
        }

        public async Task<String> DoIHaveCheksForPortAsync(Port port)
        {
            string serviceAndVersion = (port.Service + " " + port.Version).ToLower();

            switch (serviceAndVersion)
            {
                case string s when s.Contains("ftp"):
                    return ("ftp");

                case string s when s.Contains("smb"):
                    return ("smb");

                case string s when s.Contains("rpc"):
                    return ("rpc");

                case string s when s.Contains("ldap"):
                    return ("ldap");


            }
            return "";

        }


        public async Task<List<ConfigurationCheck>> CheckServiceAsync (Port port, String portService, String ip)
        {
            if (port.State == "open")
            {
                switch (portService)
                {
                    case "ftp":
                        return await FtpCheckAsync(port, ip);
                    case "smb":
                        return await SmbCheckAsync(port, ip);
                    case "rpc":
                        return await RpcCheckAsync(port, ip);
                    case "ldap":
                        return await LdapCheckAsync(port, ip);

                }
            }
            return null;

        }
        public async Task<List<ConfigurationCheck>> LdapCheckAsync(Port port, String ip)
        {
            var configurationChecks = new List<ConfigurationCheck>()
            {
                new ConfigurationCheck
                {
                    CheckName="Directory check",

                    Report=await _domainServiceFactory.CreateLdapService()
                .DirectoryCheckAsync(port, ip)

                }
            };

            return configurationChecks;
        }
        public async Task<List<ConfigurationCheck>> FtpCheckAsync(Port port, String ip)
        {
            var configurationChecks= new List<ConfigurationCheck>() 
            {
                new ConfigurationCheck
                {
                    CheckName="Anonymouse check",

                    Report=await _domainServiceFactory.CreateFtpService()
                .AnonymousCheckAsync(port, ip)
                
                }
            };
            
            return configurationChecks;
        }

        public async Task<List<ConfigurationCheck>> SmbCheckAsync(Port port, String ip)
        {
            var configurationChecks = new List<ConfigurationCheck>()
            {
                new ConfigurationCheck
                {
                    CheckName="Anonymouse check",

                    Report=await _domainServiceFactory.CreateSmbService()
                .AnonymousCheckAsync(port, ip)

                },

                new ConfigurationCheck
                {
                    CheckName="Null-Session check",

                    Report=await _domainServiceFactory.CreateSmbService()
                .NullSessionCheckAsync(port, ip)

                }
            };

            return configurationChecks;
        }

        public async Task<List<ConfigurationCheck>> RpcCheckAsync(Port port, String ip)
        {
            var configurationChecks = new List<ConfigurationCheck>()
            {
                new ConfigurationCheck
                {
                    CheckName="Anonymouse check",

                    Report=await _domainServiceFactory.CreateRpcService()
                .AnonymousCheckAsync(port, ip)

                },

            };

            return configurationChecks;
        }
    }
}
