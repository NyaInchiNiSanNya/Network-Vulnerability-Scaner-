using Network_Vulnerability_Scaner.Domain.Entities;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Domain.Services.Reaquests.json_models;
using static System.Net.Mime.MediaTypeNames;

namespace Network_Vulnerability_Scaner.Domain.Services.Reaquests
{
    internal class GithubRequest
    {
        String _personalAccessToken = "";
        
        List<String> _requestArgs = new List<String>()
        {
            "vulnerability",
            "cve"
        };

        internal async Task<List<GithubVulnerability>?> RequestToGithub(String data)
        {
            List<GithubVulnerability> gitVulns = new List<GithubVulnerability>();

            var mainArgs= data.Split(" ");

            String requestStrig = "";
            
            foreach (var arg in mainArgs)
            {
                requestStrig += arg + "+";
            }

            foreach (var requestArg in _requestArgs)
            {
                using (var httpClient = new HttpClient())
                {

                    using (var request = new HttpRequestMessage(new HttpMethod("GET"),
                               $"https://api.github.com/search/repositories?q={requestStrig}{requestArg}+language:%26sort=stars%26order=desc"))
                    {
                        request.Headers.Add("Authorization", $"Bearer {_personalAccessToken}");
                        request.Headers.Add("Accept", "application/vnd.github+json");
                        request.Headers.Add("X-GitHub-Api-Version", "2022-11-28");
                        request.Headers.Add("User-Agent",
                            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1521.3 Safari/537.36");

                        var response = await httpClient.SendAsync(request);

                        if (response.IsSuccessStatusCode)
                        {
                            var responseString = await response.Content.ReadAsStringAsync();

                            var json = JsonConvert.DeserializeObject<RootObject>(responseString);

                            if (json == null)
                            {
                                throw new NullReferenceException(nameof(json));
                            }

                            var reps = json.items;

                            foreach (var rep in reps)
                            {
                                gitVulns.Add(
                                    new GithubVulnerability()
                                    {
                                        repName = rep.name,
                                        url = rep.html_url,
                                        createdDate = rep.created_at,
                                        language = rep.language,
                                        tags = rep.topics
                                    }
                                );
                            }

                        }
                        else
                        {
                            throw new InvalidOperationException();
                        }

                    }
                }
            }

            return gitVulns;
        }
    }
}
