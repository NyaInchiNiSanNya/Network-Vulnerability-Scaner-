using AutoMapper;
using Microsoft.Extensions.DependencyInjection;
using Network_Vulnerability_Scaner.Domain.Interfaces;
using Network_Vulnerability_Scaner.Domain.Interfaces.Internal;

namespace Network_Vulnerability_Scaner.Application.ServiceFactory
{   
    internal class DomainServiceFactory : IDomainServiceFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public DomainServiceFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        INmapScanningService IDomainServiceFactory.CreateNmapScanningService()
        {
            return _serviceProvider.GetService<INmapScanningService>()
                   ?? throw new NullReferenceException(nameof(INmapScanningService));
        }

        IReportReaderService IDomainServiceFactory.CreateReportReaderService()
        {
            return _serviceProvider.GetService<IReportReaderService>()
                   ?? throw new NullReferenceException(nameof(IReportReaderService));
        }

        IGetNmapScanStringService IDomainServiceFactory.CreateGetNmapScanStringService()
        {
            return _serviceProvider.GetService<IGetNmapScanStringService>()
                   ?? throw new NullReferenceException(nameof(IGetNmapScanStringService));
        }

        IPortConfigurationCheckService IDomainServiceFactory.CreatePortConfigurationCheckService()
        {
            return _serviceProvider.GetService<IPortConfigurationCheckService>()
                   ?? throw new NullReferenceException(nameof(IPortConfigurationCheckService));
        }

        IFtpService IDomainServiceFactory.CreateFtpService()
        {
            return _serviceProvider.GetService<IFtpService>()
                   ?? throw new NullReferenceException(nameof(IFtpService));
        }

        ISmbService IDomainServiceFactory.CreateSmbService()
        {
            return _serviceProvider.GetService<ISmbService>()
                   ?? throw new NullReferenceException(nameof(ISmbService));
        }

        IRpcService IDomainServiceFactory.CreateRpcService()
        {
             return _serviceProvider.GetService<IRpcService>()
                   ?? throw new NullReferenceException(nameof(IRpcService));
        }

        ILdapService IDomainServiceFactory.CreateLdapService()
        {
            return _serviceProvider.GetService<ILdapService>()
                   ?? throw new NullReferenceException(nameof(ILdapService));
        }
    }
}
