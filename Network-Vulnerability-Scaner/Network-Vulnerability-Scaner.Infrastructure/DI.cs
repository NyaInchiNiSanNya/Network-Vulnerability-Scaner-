using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Network_Vulnerability_Scaner.Infrastructure.Data;
using Microsoft.Extensions.Configuration;
using MongoDB.Driver;
using Network_Vulnerability_Scaner.Infrastructure.Repository;
using Network_Vulnerability_Scaner.Application.Interfaces.Repositories;
using System.Reflection;

namespace Network_Vulnerability_Scaner.Infrastructure
{
    public static class InfrastructureDI
    {
        public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddSingleton<IMongoClient>(s =>
                new MongoClient(configuration["ReportsDBSettings:ConnectionString"]));

            services.Configure<ReportsDBSettings>(options =>
            {
                var section = configuration.GetSection(nameof(ReportsDBSettings));
                
                options.ConnectionString = section["ConnectionString"] 
                                           ?? throw new InvalidOperationException(nameof(configuration));
                options.ReportsCollectionName = section["ReportsCollectionName"]
                                                ?? throw new InvalidOperationException(nameof(configuration));
                options.DatabaseName = section["DatabaseName"]
                                       ?? throw new InvalidOperationException(nameof(configuration));

            });

            services.AddSingleton<IReportsDBSettings>(sp =>
                sp.GetRequiredService<IOptions<ReportsDBSettings>>().Value);
            
            services.AddScoped<IReportRepository, ReportRepository>();

            services.AddAutoMapper(Assembly.GetExecutingAssembly());

            return services;
        }
    }
}
    