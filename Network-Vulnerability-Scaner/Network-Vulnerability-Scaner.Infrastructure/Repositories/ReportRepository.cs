using AutoMapper;
using MongoDB.Driver;
using Network_Vulnerability_Scaner.Application.Interfaces.Repositories;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Infrastructure.Data;
using Network_Vulnerability_Scaner.Infrastructure.Models;

namespace Network_Vulnerability_Scaner.Infrastructure.Repository
{
    internal class ReportRepository:IReportRepository
    {
        private readonly IMongoCollection<ScanReport> _reports;
        private readonly IMapper _mapper;

        public ReportRepository(IReportsDBSettings settings
            , IMongoClient mongoClient
            ,IMapper mapper)
        {
            var x = settings.DatabaseName;
            var database = mongoClient.GetDatabase(settings.DatabaseName);
            _reports = database.GetCollection<ScanReport>(settings.ReportsCollectionName);

            _mapper = mapper ?? throw new NullReferenceException(nameof(mapper));
        }

        public async Task AddReportAsync(ScanReportDto reportDto)
        {
            await _reports.InsertOneAsync(_mapper.Map<ScanReport>(reportDto));
        }

        public async Task<List<ShortDiscReportDto>> GetAllReportsAsync()
        {
            var jrep = await _reports.Find(_ => true).ToListAsync();
            var documents = _mapper.Map<List<ShortDiscReportDto>>(jrep);
            
            return documents;
        }
    }
}
