using AutoMapper;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.Models.Requests_Responses;
using Network_Vulnerability_Scaner.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Network_Vulnerability_Scaner.Infrastructure.Models
{
    public class ScanReport
    {
        [BsonId]
        [BsonElement("Id")]
        [BsonRepresentation(BsonType.String)]
        public String ReportId { get; set; }

        [BsonElement("startTime")]
        public DateTime StartTime { get; set; }

        [BsonElement("scanConfiguration")]
        public NetworkScanConfiguration NetworkScanConfiguration { get; set; }

        [BsonElement("nmapReport")]
        public String ActiveHostsNmapReport { get; set; }

        [BsonElement("activeHosts")]
        public List<Host> ActiveHosts { get; set; }

        public class Map : Profile
        {
            public Map()
            {
                CreateMap<ScanReportDto, ScanReport>()
                    .ReverseMap();
                CreateMap<ShortDiscReportDto, ScanReport>()
                    .ReverseMap();
            }

        }

    }

    public class NetworkScanConfiguration
    {
        [BsonElement("ipToScan")]
        public String Ip { get; set; }
        [BsonElement("portsToScan")]
        public List<Int32>? Ports { get; set; }
        [BsonElement("tcpScan")]
        public Boolean Tcp { get; set; }
        [BsonElement("tcpScanMethod")]
        public String TcpScanMethod { get; set; }
        [BsonElement("udScan")]
        public Boolean Udp { get; set; }

        public class Map : Profile
        {
            public Map()
            {
                CreateMap<NetworkToScanDto, NetworkScanConfiguration>()
                    .ReverseMap();

            }

        }
    }

    public class Port
    {
        [BsonElement("portNumber")]
        public Int32 PortNumber { get; set; }
        [BsonElement("protocol")]
        public String Protocol { get; set; }
        [BsonElement("service")]
        public String Service { get; set; }
        [BsonElement("version")]
        public String Version { get; set; }
        [BsonElement("state")]
        public String State { get; set; }
        [BsonElement("serviceConfigurationChecks")]
        public List<ConfigurationCheck> ConfigurationCheck { get; set; }
        [BsonElement("vulns")]
        public List<ExploitDbVulnerability>? ExploitDbReport { get; set; }
        public class Map : Profile
        {
            public Map()
            {
                CreateMap<PortDto, Port>()
                    .ReverseMap();
            }

        }
    }

    public class ExploitDbVulnerability
    {
        [BsonElement("exploitTitle")]
        public String ExploitTitle { get; set; }
        [BsonElement("URL")]
        public String URL { get; set; }
        [BsonElement("code")]
        public String Codes { get; set; }
        [BsonElement("verified")]
        public Boolean Verified { get; set; }
        [BsonElement("fileType")]
        public String FileType { get; set; }
        [BsonElement("downloadLink")]
        public String DownloadExp { get; set; }

        public class Map : Profile
        {
            public Map()
            {
                CreateMap<ExploitDbVulnerabilityDto, ExploitDbVulnerability>()
                    .ReverseMap();
            }

        }
    }

    public class ConfigurationCheck
    {
        [BsonElement("checkName")]
        public String CheckName { get; set; }
        [BsonElement("report")]
        public String Report { get; set; }

        public class Map : Profile
        {
            public Map()
            {
                CreateMap<ConfigurationCheckDto, ConfigurationCheck>()
                    .ReverseMap();

            }

        }
    }

    public class Host
    {
        [BsonElement("ip")]
        public String Ip { get; set; }
        [BsonElement("mac")]
        public String? MAC { get; set; }
        [BsonElement("os")]
        public String? OS { get; set; }
        [BsonElement("portScanStartTime")]
        public DateTime PortScanStartTime { get; set; }
        [BsonElement("activePortsNmapReport")]
        public String AcivePortsNmapReport { get; set; }

        public List<Port>? OpenPorts { get; set; }

        public class Map : Profile
        {
            public Map()
            {
                CreateMap<HostDto, Host>()
                    .ReverseMap();
            }

        }
    }
}
