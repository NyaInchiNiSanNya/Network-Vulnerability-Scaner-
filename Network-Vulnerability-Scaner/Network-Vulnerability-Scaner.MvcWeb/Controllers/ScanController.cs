using FluentValidation;
using Microsoft.AspNetCore.Mvc;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.Models.Requests_Responses;
using Network_Vulnerability_Scaner.Application.ServiceFactory;

namespace Network_Vulnerability_Scaner.MvcWeb.Controllers
{
    public class ScanController : Controller
    {
        private readonly IServiceFactory _serviceFactory;

        public ScanController(IServiceFactory ServiceFactory)
        {
            _serviceFactory = ServiceFactory ?? throw new NullReferenceException(nameof(ServiceFactory));
        }

        [HttpGet]
        public async Task<IActionResult> GetScanConfigPage()
        {
            return View("configuration");
        }

        [HttpPost]
        public async Task<IActionResult> Scanning([FromForm] NetworkToScanRequest request)
        {
            var validate = await _serviceFactory.CreateScanRequestValidator().ValidateAsync(request);

            if (validate.IsValid)
            {
                var report = await _serviceFactory.CreateScanService()
                    .Scanner(_serviceFactory.CreateMapperService().
                        Map<NetworkToScanDto>(request));

                return Ok();
            }

            return BadRequest(validate.Errors);
        }

        [HttpGet]
        public async Task<IActionResult> GetScanReports()
        {
            var reports = _serviceFactory.CreateMapperService().Map<List<ReportsResponse>>(
                await _serviceFactory.CreateReportService().GetAllReportsAsync());

            return View("reports", reports);
        }

        [HttpGet]
        public async Task<IActionResult> GetReportByReportId(String id)
        {
            if (String.IsNullOrEmpty(id))
            {
                return BadRequest(id);
            }

            return View("HostReport", _serviceFactory
                .CreateMapperService()
                .Map<ScanReportResponse>(await _serviceFactory.CreateReportService().GetReportByIdAsync(id)));
        }

        [HttpGet]
        public async Task<IActionResult> GetExtensiveReportByReportId(String id)
        {
            if (String.IsNullOrEmpty(id))
            {
                return BadRequest(id);
            }

            return View("HostReportWithPorts", _serviceFactory
                .CreateMapperService()
                .Map<ScanReportResponse>(await _serviceFactory.CreateReportService().GetReportByIdAsync(id)));
        }

        [HttpPost]
        public async Task<IActionResult> GetVulnerability([FromBody] GetVulnerabilityRequest dataRequest)
        {
            var validate = await _serviceFactory.CreateVulnerabilityRequestValidator().ValidateAsync(dataRequest);

            if (!validate.IsValid) 
            {
                return BadRequest();
            }

            var dataDto = _serviceFactory.CreateMapperService()
                .Map<dataForVulnsSearchDto>(dataRequest);

            var vulnReportDto = await _serviceFactory.CreateVulnSearchService()
                .GetVulnsAsync(dataDto);

            return Ok(_serviceFactory.CreateMapperService()
                .Map<VulnSearchReportResponse>(vulnReportDto));
        }

        [HttpPost]
        public async Task<IActionResult> GetScripts([FromBody] GetScriptsRequest dataRequest)
        {
            var validate = await _serviceFactory.CreateScriptsRequestValidator().ValidateAsync(dataRequest);

            if (!validate.IsValid)
            {
                return BadRequest();
            }

            var allScriptsDto = await _serviceFactory.CreateScriptsService().GetAllScriptsAsync();

            return Ok(allScriptsDto);
        }

    }
}
