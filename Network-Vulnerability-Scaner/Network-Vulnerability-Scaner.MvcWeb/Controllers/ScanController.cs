using AutoMapper;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.Models.Requests_Responses;
using Network_Vulnerability_Scaner.Application.ServiceFactory;

namespace Network_Vulnerability_Scaner.RazorWeb.Controllers
{
    public class ScanController : Controller
    {
        private readonly IServiceFactory _serviceFactory;

        public ScanController(IServiceFactory ServiceFactory)
        {
            _serviceFactory = ServiceFactory ?? throw new NullReferenceException(nameof(ServiceFactory));
        }

        [HttpGet]
        public async Task<IActionResult> GetScanConfigPage()
        {
            return View("configuration");
        }

        [HttpPost]
        public async Task<IActionResult> Scanning([FromForm] NetworkToScanRequest request)
        {
            var validate = await _serviceFactory.CreateScanRequestValidator().ValidateAsync(request);

            if (validate.IsValid)
            {
                var report = await _serviceFactory.CreateScanService()
                    .Scanner(_serviceFactory.CreateMapperService().
                        Map<NetworkToScanDto>(request));

                return Ok(_serviceFactory.CreateMapperService().Map<ScanReportResponse>(report));
            }

            return BadRequest(validate.Errors);
        }

        [HttpGet]
        public async Task<IActionResult> GetScanReports()
        {
            var reports = _serviceFactory.CreateMapperService().Map<List<ReportsResponse>>(
                await _serviceFactory.CreateReportService().GetAllReports());

            return View("reports", reports);
        }

        [HttpGet]
        public async Task<IActionResult> GetReportByReportId(String id)
        {

            return View("reports");
        }

    }
}
