using AutoMapper;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.Models.Requests_Responses;
using Network_Vulnerability_Scaner.Application.ServiceFactory;

namespace Network_Vulnerability_Scaner.Controllers
{
    [Route("ExploitDbVulnsController")]
    [ApiController]
    public class ExploitDbVulnsController : ControllerBase
    {
        private readonly IServiceFactory _serviceFactory;

        public ExploitDbVulnsController(IServiceFactory ServiceFactory)
        {
            _serviceFactory = ServiceFactory ?? throw new NullReferenceException(nameof(ServiceFactory));
        }

        [HttpGet]
        public async Task<IActionResult> GetVulnerability([FromQuery] GetVulnerabilityRequest dataRequest)
        {
            var validate = await _serviceFactory.CreateVulnerabilityRequestValidator().ValidateAsync(dataRequest);

            if (!validate.IsValid)
            {
                return BadRequest();
            }

            var dataDto = _serviceFactory.CreateMapperService()
                .Map<dataForVulnsSearchDto>(dataRequest);

            var vulnReportDto = await _serviceFactory.CreateVulnSearchService()
                .GetExploitDbVulnsAsync(dataDto);

            return Ok(_serviceFactory.CreateMapperService()
                .Map<List<ExploitDbVulnerabilityResponse>>(vulnReportDto));
        }
    }
}
