using Network_Vulnerability_Scaner.Application.Interfaces.Repositories;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.ServiceFactory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Network_Vulnerability_Scaner.Domain.Entities;

namespace Network_Vulnerability_Scaner.Application.Services
{

    public class VulnSearchService:IVulnSearchService
    {
        private readonly IServiceFactory _serviceFactory;

        public VulnSearchService(IServiceFactory serviceFactory, IReportRepository reportRepository)
        {
            _serviceFactory = serviceFactory ?? throw new NullReferenceException(nameof(ServiceFactory));
        }

        public async Task<VulnSearchReportDto> GetVulnsByPortAsync(PortDto port)
        {
            var validator = await _serviceFactory.CreatePortDtoValidator().ValidateAsync(port);
            
            if (validator.IsValid)
            {
                throw new ArgumentException(nameof(port));
            }

            var portEntity = _serviceFactory.CreateMapperService().Map<Port>(port);

            var resultNvd =
                await _serviceFactory.CreateVulnNvdSearchService()
                    .GetVulnsFromNvdDbAsync(portEntity);

            return new VulnSearchReportDto()
            {
                NVDReport = _serviceFactory.CreateMapperService()
                    .Map<List<NvdVulnDto>>(resultNvd)
            };
        }
    }
}
