using Network_Vulnerability_Scaner.Application.Interfaces.Repositories;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.ServiceFactory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Network_Vulnerability_Scaner.Domain.Entities;

namespace Network_Vulnerability_Scaner.Application.Services
{

    public class VulnSearchService : IVulnSearchService
    {
        private readonly IServiceFactory _serviceFactory;

        public VulnSearchService(IServiceFactory serviceFactory, IReportRepository reportRepository)
        {
            _serviceFactory = serviceFactory ?? throw new NullReferenceException(nameof(ServiceFactory));
        }

        public async Task<VulnSearchReportDto> GetVulnsAsync(dataForVulnsSearchDto dataSearchDto)
        {
            if (!(await _serviceFactory.CreateDataForVulnDtoValidator()
                    .ValidateAsync(dataSearchDto)).IsValid)
            {
                throw new ArgumentException(nameof(dataSearchDto));
            }

            var dataSearch = _serviceFactory.CreateMapperService().Map<dataForVulnSearch>(dataSearchDto);

            Task<List<NvdVulnerability>> nvdReportTask = _serviceFactory.CreateVulnSearchDomainService()
                .GetVulnsFromNvdDbAsync(dataSearch);

            Task<List<ExploitDbVulnerability>?> exploitBdReportTask = _serviceFactory
                .CreateVulnSearchDomainService()
                .GetVulnsFromExploitDbAsync(dataSearch);

            Task<List<GithubVulnerability>?> gitReportTask = _serviceFactory
                .CreateVulnSearchDomainService()
                .GetVulnsFromGithubAsync(dataSearch);

            await Task.WhenAll(nvdReportTask, exploitBdReportTask, gitReportTask);


            return new VulnSearchReportDto()
            {
                NvdReport = _serviceFactory.CreateMapperService()
                    .Map<List<NvdVulnDto>>(nvdReportTask.Result),

                ExploitDbReport = _serviceFactory.CreateMapperService()
                .Map<List<ExploitDbVulnerabilityDto>>(exploitBdReportTask.Result),

                GitVulnReport =_serviceFactory.CreateMapperService()
                    .Map<List<GitVulnDto>>(gitReportTask.Result)
            };
        }

        public async Task<IEnumerable<GitVulnDto>> GetGitHubVulnsAsync(dataForVulnsSearchDto dataSearchDto)
        {
            if (!(await _serviceFactory.CreateDataForVulnDtoValidator()
                    .ValidateAsync(dataSearchDto)).IsValid)
            {
                throw new ArgumentException(nameof(dataSearchDto));
            }
            var dataSearch = _serviceFactory.CreateMapperService().Map<dataForVulnSearch>(dataSearchDto);
            
            return _serviceFactory.CreateMapperService()
                .Map<List<GitVulnDto>>(await _serviceFactory
                    .CreateVulnSearchDomainService()
                    .GetVulnsFromGithubAsync(dataSearch));
        }
        public async Task<IEnumerable<ExploitDbVulnerabilityDto>> GetExploitDbVulnsAsync(dataForVulnsSearchDto dataSearchDto)
        {
            if (!(await _serviceFactory.CreateDataForVulnDtoValidator()
                    .ValidateAsync(dataSearchDto)).IsValid)
            {
                throw new ArgumentException(nameof(dataSearchDto));
            }
            var dataSearch = _serviceFactory.CreateMapperService().Map<dataForVulnSearch>(dataSearchDto);

            var vulns = await _serviceFactory
                .CreateVulnSearchDomainService()
                .GetVulnsFromExploitDbAsync(dataSearch);
            
            return _serviceFactory.CreateMapperService()
                .Map<List<ExploitDbVulnerabilityDto>>(vulns);
        }

        public async Task<IEnumerable<NvdVulnDto>> GetNvdVulnsAsync(dataForVulnsSearchDto dataSearchDto)
        {
            if (!(await _serviceFactory.CreateDataForVulnDtoValidator()
                    .ValidateAsync(dataSearchDto)).IsValid)
            {
                throw new ArgumentException(nameof(dataSearchDto));
            }

            var dataSearch = _serviceFactory.CreateMapperService().Map<dataForVulnSearch>(dataSearchDto);

            return _serviceFactory.CreateMapperService()
                .Map<List<NvdVulnDto>>(await _serviceFactory.CreateVulnSearchDomainService()
                    .GetVulnsFromNvdDbAsync(dataSearch));
        }
    }
}
