using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Network_Vulnerability_Scaner.Application.Interfaces.Repositories;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.ServiceFactory;
using Network_Vulnerability_Scaner.Domain.Entities;

namespace Network_Vulnerability_Scaner.Application.Services
{
    public class ScanService: IScanService
    {
        private readonly IServiceFactory _serviceFactory;
        private readonly IReportRepository _reportRepository;

        public ScanService(IServiceFactory serviceFactory,IReportRepository reportRepository)
        {
            _serviceFactory = serviceFactory ?? throw new NullReferenceException(nameof(ServiceFactory));

            _reportRepository = reportRepository ?? throw new NullReferenceException(nameof(reportRepository));
        }

        public async Task<ScanReportDto> Scanner(NetworkToScanDto networkToScanDto)
        {
            //Проверяем вводные
            if (!(await _serviceFactory.CreateScanDtoValidator()
                    .ValidateAsync(networkToScanDto)).IsValid)
            {
                throw new ArgumentException(nameof(networkToScanDto));
            }


            var hostScanReport= await _serviceFactory.CreateScanMethodsService()
                .GetActiveHostsAsync(_serviceFactory.CreateMapperService()
                    .Map<NetworkConfiguration>(networkToScanDto));

            if (hostScanReport.ActiveHosts.Count!=0)
            {
                await _serviceFactory.CreateScanMethodsService()
                    .GetOpenPortsAsync(hostScanReport.ActiveHosts as IEnumerable<Host>,_serviceFactory.CreateMapperService()
                        .Map<NetworkConfiguration>(networkToScanDto));
            }

            if (networkToScanDto.ConfigurationCheck)
            {
                    await _serviceFactory.CreateScanMethodsService()
                    .CheckPortsConfiguationAsync(hostScanReport.ActiveHosts as IEnumerable<Host>);
            }

            var reportDto = _serviceFactory
                .CreateMapperService().Map<ScanReportDto>(hostScanReport);

            foreach (HostDto hostDto in reportDto.ActiveHosts)
            {
                if (hostDto.OpenPorts != null && hostDto.OpenPorts.Count>0)
                {
                    foreach (PortDto portDto in hostDto.OpenPorts)
                    {
                        if (!String.IsNullOrEmpty(portDto.Version))
                        {
                            portDto.ExploitDbReport = await _serviceFactory
                            .CreateVulnSearchService().GetExploitDbVulnsAsync
                            (
                            new dataForVulnsSearchDto()
                            {
                                Service = portDto.Service,
                                Version = portDto.Version
                            }
                            );
                        }
                    }
                }
            }

            reportDto.ReportId = Guid.NewGuid().ToString("N");

            reportDto.NetworkScanConfiguration = networkToScanDto;

            await _reportRepository.AddReportAsync(reportDto);

            return reportDto;
        }
    }
} 
