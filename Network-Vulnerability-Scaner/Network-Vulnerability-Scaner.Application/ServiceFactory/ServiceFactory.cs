using AutoMapper;
using FluentValidation;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Microsoft.Extensions.DependencyInjection;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.Models.Requests_Responses;
using Network_Vulnerability_Scaner.Domain.Interfaces;

namespace Network_Vulnerability_Scaner.Application.ServiceFactory
{
    public class ServiceFactory : IServiceFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public ServiceFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        IMapper IServiceFactory.CreateMapperService()
        {
            return _serviceProvider.GetService<IMapper>()
                   ?? throw new NullReferenceException(nameof(IMapper));
        }

        IScanService IServiceFactory.CreateScanService()
        {
            return _serviceProvider.GetService<IScanService>()
                   ?? throw new NullReferenceException(nameof(IScanService));
        }

        IValidator<NetworkToScanRequest> IServiceFactory.CreateScanRequestValidator()
        {
            return _serviceProvider.GetService<IValidator<NetworkToScanRequest>>()
                   ?? throw new NullReferenceException(nameof(IValidator<NetworkToScanRequest>));
        }

        IValidator<NetworkToScanDto> IServiceFactory.CreateScanDtoValidator()
        {
            return _serviceProvider.GetService<IValidator<NetworkToScanDto>>()
                   ?? throw new NullReferenceException(nameof(IValidator<NetworkToScanDto>));
        }

        IScanMethodsService IServiceFactory.CreateScanMethodsService()
        {
            return _serviceProvider.GetService<IScanMethodsService>()
                   ?? throw new NullReferenceException(nameof(IScanMethodsService));
        }
    }
}
