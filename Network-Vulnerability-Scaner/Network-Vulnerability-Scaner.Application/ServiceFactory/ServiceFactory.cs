using AutoMapper;
using FluentValidation;
using Network_Vulnerability_Scaner.Application.Interfaces;
using Microsoft.Extensions.DependencyInjection;
using Network_Vulnerability_Scaner.Application.Models.Dto;
using Network_Vulnerability_Scaner.Application.Models.Requests_Responses;
using Network_Vulnerability_Scaner.Domain.Interfaces;
using Network_Vulnerability_Scaner.Application.Services;

namespace Network_Vulnerability_Scaner.Application.ServiceFactory
{
    public class ServiceFactory : IServiceFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public ServiceFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        IMapper IServiceFactory.CreateMapperService()
        {
            return _serviceProvider.GetService<IMapper>()
                   ?? throw new NullReferenceException(nameof(IMapper));
        }

        IScanService IServiceFactory.CreateScanService()
        {
            return _serviceProvider.GetService<IScanService>()
                   ?? throw new NullReferenceException(nameof(IScanService));
        }

        IReportService IServiceFactory.CreateReportService()
        {
            return _serviceProvider.GetService<IReportService>()
                   ?? throw new NullReferenceException(nameof(IReportService));
        }
        IVulnSearchService IServiceFactory.CreateVulnSearchService()
        {
            return _serviceProvider.GetService<IVulnSearchService>()
                   ?? throw new NullReferenceException(nameof(IVulnSearchService));
        }

        IVulnNvdSearchService IServiceFactory.CreateVulnNvdSearchService()
        {
            return _serviceProvider.GetService<IVulnNvdSearchService>()
                   ?? throw new NullReferenceException(nameof(IVulnNvdSearchService));
        }

        IValidator<NetworkToScanRequest> IServiceFactory.CreateScanRequestValidator()
        {
            return _serviceProvider.GetService<IValidator<NetworkToScanRequest>>()
                   ?? throw new NullReferenceException(nameof(IValidator<NetworkToScanRequest>));
        }

        IValidator<NetworkToScanDto> IServiceFactory.CreateScanDtoValidator()
        {
            return _serviceProvider.GetService<IValidator<NetworkToScanDto>>()
                   ?? throw new NullReferenceException(nameof(IValidator<NetworkToScanDto>));
        }

        IValidator<GetPortVulnerabilityRequest> IServiceFactory.CreatePortVulnerabilityRequestValidator()
        {
            return _serviceProvider.GetService<IValidator<GetPortVulnerabilityRequest>>()
                   ?? throw new NullReferenceException(nameof(IValidator<GetPortVulnerabilityRequest>));
        }

        IValidator<PortDto> IServiceFactory.CreatePortDtoValidator()
        {
            return _serviceProvider.GetService<IValidator<PortDto>>()
                   ?? throw new NullReferenceException(nameof(IValidator<PortDto>));
        }

        IScanMethodsService IServiceFactory.CreateScanMethodsService()
        {
            return _serviceProvider.GetService<IScanMethodsService>()
                   ?? throw new NullReferenceException(nameof(IScanMethodsService));
        }
    }
}
